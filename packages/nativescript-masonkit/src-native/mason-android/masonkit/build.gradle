plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
 // id 'org.mozilla.rust-android-gradle.rust-android'
}
import org.apache.tools.ant.taskdefs.condition.Os



def NDK_PATH = ""
def hasNdkDirectory = project.hasProperty("ndkDirectory")
if(!hasNdkDirectory){
  println "No ndkDirectory set, checking environment \$ANDROID_NDK..."

  NDK_PATH = "$System.env.ANDROID_NDK"
  if (NDK_PATH == null || NDK_PATH == "null"){
    println "No ndkDirectory set, checking environment \$ANDROID_NDK_ROOT..."
    NDK_PATH = "$System.env.ANDROID_NDK_ROOT"
  }

  if (NDK_PATH == null || NDK_PATH == "null"){
    println "No ndkDirectory set, checking environment \$ANDROID_NDK_HOME..."
    NDK_PATH = "$System.env.ANDROID_NDK_HOME"
  }
} else {
  NDK_PATH = ndkDirectory
}
println "Runtime using NDK_PATH: " + NDK_PATH



android {
  namespace 'org.nativescript.mason.masonkit'
  compileSdk 33
  defaultConfig {
    minSdk 17
    targetSdk 33
    multiDexEnabled true
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles "consumer-rules.pro"

    externalNativeBuild {
      cmake {
        arguments "-DANDROID_TOOLCHAIN=clang",
          "-DANDROID_STL=c++_shared",
          "-DANDROID_NDK_ROOT=${System.getenv("ANDROID_NDK_ROOT")}"
      }
    }
    ndk {
      abiFilters 'x86','x86_64', 'armeabi-v7a', 'arm64-v8a'
      //abiFilters 'x86_64'
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  ndkVersion '21.4.7075529'
}

dependencies {

  implementation 'androidx.core:core-ktx:1.9.0'
  implementation 'androidx.appcompat:appcompat:1.5.1'
  implementation 'com.google.android.material:material:1.7.0'
  implementation 'com.google.code.gson:gson:2.10'
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.4'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
  implementation 'androidx.multidex:multidex:2.0.1'

}


/*
cargo {
  module = "../../mason-native"
  libname = "masonnative"
  targets = ["arm64"]
  //targets = ["arm", "arm64", "x86", "x86_64"]
  apiLevels = [
    "arm"   : 17,
    "arm64" : 21,
    "x86"   : 17,
    "x86_64": 21
  ]
  profile = 'release'

  extraCargoBuildArguments = ['-Z', "build-std=std,panic_abort", '-Z', 'build-std-features=panic_immediate_abort', '-p', 'mason-android']
  rustupChannel = "nightly"
}
*/


def targets = ["arm", "arm64", "x86", "x86_64"]
tasks.whenTaskAdded { task ->
//  if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
//    task.dependsOn 'cargoBuild'
//  }

  for (target in targets) {
    if (task.name == "cargoBuild${target.capitalize()}") {
      task.dependsOn "copy_libc++_shared${target.capitalize()}"
    }
  }
}

for (target in targets) {
  tasks.register("copy_libc++_shared${target.capitalize()}", Copy) {
    def ndkDir = project.ndkDirectory
    // hostTag, abi and archTriple from: https://developer.android.com/ndk/guides/other_build_systems

    def hostTag
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      if (Os.isArch("x86_64") || Os.isArch("amd64")) {
        hostTag = "windows-x86_64"
      } else {
        hostTag = "windows"
      }
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
      hostTag = "darwin-x86_64"
    } else {
      hostTag = "linux-x86_64"
    }

    def (abi, archTriple) = [
      arm   : ['armeabi-v7a', 'arm-linux-androideabi'],
      arm64 : ['arm64-v8a', 'aarch64-linux-android'],
      x86   : ['x86', 'i686-linux-android'],
      x86_64: ['x86_64', 'x86_64-linux-android'],
    ][target]

    def from_path = "$ndkDir/toolchains/llvm/prebuilt/$hostTag/sysroot/usr/lib/$archTriple/libc++_shared.so"
    def into_path = layout.buildDirectory.dir("rustJniLibs/android/$abi")

    assert file(from_path).exists()

    from from_path
    into into_path
  }
}


