const { compareScreens } = require('./screenshots');
const { device } = require('detox');

beforeEach(async () => {
  await device.launchApp({ newInstance: true });
});

async function runFailingTests() {
  console.log('79:FLEX BASIS UNCONSTRAINT COLUMN');
  await element(by.text('79')).tap();
  await compareScreens(element(by.id('test-root')), '79');
  await element(by.id('flex_basis')).tap();

  console.log('80:FLEX BASIS UNCONSTRAINT ROW');
  await element(by.text('80')).tap();
  await compareScreens(element(by.id('test-root')), '80');
  await element(by.id('flex_basis')).tap();

  console.log('87:FLEX GROW CHILD');
  await element(by.text('87')).tap();
  await compareScreens(element(by.id('test-root')), '87');
  await element(by.id('flex_grow_')).tap();

  console.log('95:FLEX GROW WITHIN CONSTRAINED MAX COLUMN');
  await element(by.text('95')).tap();
  await compareScreens(element(by.id('test-root')), '95');
  await element(by.id('flex_grow_')).tap();

  console.log('98:FLEX GROW WITHIN CONSTRAINED MIN COLUMN');
  await element(by.text('98')).tap();
  await compareScreens(element(by.id('test-root')), '98');
  await element(by.id('flex_grow_')).tap();

  console.log('99:FLEX GROW WITHIN CONSTRAINED MIN MAX COLUMN');
  await element(by.text('99')).tap();
  await compareScreens(element(by.id('test-root')), '99');
  await element(by.id('flex_grow_')).tap();

  console.log('103:FLEX SHRINK BY OUTER MARGIN WITH MAX SIZE');
  await element(by.text('103')).tap();
  await compareScreens(element(by.id('test-root')), '103');
  await element(by.id('flex_shrin')).tap();

  console.log('178:GRID AUTO COLUMNS FIXED WIDTH');
  await element(by.text('178')).tap();
  await compareScreens(element(by.id('test-root')), '178');
  await element(by.id('grid_auto_')).tap();

  console.log('182:GRID AUTO SINGLE ITEM');
  await element(by.text('182')).tap();
  await compareScreens(element(by.id('test-root')), '182');
  await element(by.id('grid_auto_')).tap();

  console.log('183:GRID AUTO SINGLE ITEM FIXED WIDTH');
  await element(by.text('183')).tap();
  await compareScreens(element(by.id('test-root')), '183');
  await element(by.id('grid_auto_')).tap();

  console.log('184:GRID AUTO SINGLE ITEM FIXED WIDTH WITH DEFINITE WIDTH');
  await element(by.text('184')).tap();
  await compareScreens(element(by.id('test-root')), '184');
  await element(by.id('grid_auto_')).tap();

  console.log('192:GRID FR AUTO NO SIZED ITEMS');
  await element(by.text('192')).tap();
  await compareScreens(element(by.id('test-root')), '192');
  await element(by.id('grid_fr_au')).tap();

  console.log('193:GRID FR AUTO SINGLE ITEM');
  await element(by.text('193')).tap();
  await compareScreens(element(by.id('test-root')), '193');
  await element(by.id('grid_fr_au')).tap();

  console.log('238:GRID MIN MAX COLUMN AUTO');
  await element(by.text('238')).tap();
  await compareScreens(element(by.id('test-root')), '238');
  await element(by.id('grid_min_m')).tap();

  console.log('239:GRID MIN MAX COLUMN FIXED WIDTH ABOVE RANGE');
  await element(by.text('239')).tap();
  await compareScreens(element(by.id('test-root')), '239');
  await element(by.id('grid_min_m')).tap();

  console.log('240:GRID MIN MAX COLUMN FIXED WIDTH BELOW RANGE');
  await element(by.text('240')).tap();
  await compareScreens(element(by.id('test-root')), '240');
  await element(by.id('grid_min_m')).tap();

  console.log('241:GRID MIN MAX COLUMN FIXED WIDTH WITHIN RANGE');
  await element(by.text('241')).tap();
  await compareScreens(element(by.id('test-root')), '241');
  await element(by.id('grid_min_m')).tap();

  console.log('242:GRID OUT OF ORDER ITEMS');
  await element(by.text('242')).tap();
  await compareScreens(element(by.id('test-root')), '242');
  await element(by.id('grid_out_o')).tap();

  console.log('247:GRID PERCENT TRACKS DEFINITE OVERFLOW');
  await element(by.text('247')).tap();
  await compareScreens(element(by.id('test-root')), '247');
  await element(by.id('grid_perce')).tap();

  console.log('249:GRID PERCENT TRACKS INDEFINITE ONLY');
  await element(by.text('249')).tap();
  await compareScreens(element(by.id('test-root')), '249');
  await element(by.id('grid_perce')).tap();

  console.log('271:JUSTIFY CONTENT ROW MAX WIDTH AND MARGIN');
  await element(by.text('271')).tap();
  await compareScreens(element(by.id('test-root')), '271');
  await element(by.id('justify_co')).tap();

  console.log('308:MAX HEIGHT OVERRIDES HEIGHT');
  await element(by.text('308')).tap();
  await compareScreens(element(by.id('test-root')), '308');
  await element(by.id('max_height')).tap();

  console.log('309:MAX HEIGHT OVERRIDES HEIGHT ON ROOT');
  await element(by.text('309')).tap();
  await compareScreens(element(by.id('test-root')), '309');
  await element(by.id('max_height')).tap();

  console.log('311:MAX WIDTH OVERRIDES WIDTH');
  await element(by.text('311')).tap();
  await compareScreens(element(by.id('test-root')), '311');
  await element(by.id('max_width_')).tap();

  console.log('312:MAX WIDTH OVERRIDES WIDTH ON ROOT');
  await element(by.text('312')).tap();
  await compareScreens(element(by.id('test-root')), '312');
  await element(by.id('max_width_')).tap();

  console.log('324:MEASURE ROOT');
  await element(by.text('324')).tap();
  await compareScreens(element(by.id('test-root')), '324');
  await element(by.id('measure_ro')).tap();

  console.log('328:MIN HEIGHT OVERRIDES HEIGHT');
  await element(by.text('328')).tap();
  await compareScreens(element(by.id('test-root')), '328');
  await element(by.id('min_height')).tap();

  console.log('329:MIN HEIGHT OVERRIDES HEIGHT ON ROOT');
  await element(by.text('329')).tap();
  await compareScreens(element(by.id('test-root')), '329');
  await element(by.id('min_height')).tap();

  console.log('330:MIN HEIGHT OVERRIDES MAX HEIGHT');
  await element(by.text('330')).tap();
  await compareScreens(element(by.id('test-root')), '330');
  await element(by.id('min_height')).tap();

  console.log('333:MIN WIDTH OVERRIDES MAX WIDTH');
  await element(by.text('333')).tap();
  await compareScreens(element(by.id('test-root')), '333');
  await element(by.id('min_width_')).tap();

  console.log('334:MIN WIDTH OVERRIDES WIDTH');
  await element(by.text('334')).tap();
  await compareScreens(element(by.id('test-root')), '334');
  await element(by.id('min_width_')).tap();

  console.log('335:MIN WIDTH OVERRIDES WIDTH ON ROOT');
  await element(by.text('335')).tap();
  await compareScreens(element(by.id('test-root')), '335');
  await element(by.id('min_width_')).tap();

  console.log('343:PADDING NO CHILD');
  await element(by.text('343')).tap();
  await compareScreens(element(by.id('test-root')), '343');
  await element(by.id('padding_no')).tap();

  console.log('368:PERCENTAGE WIDTH HEIGHT UNDEFINED PARENT SIZE');
  await element(by.text('368')).tap();
  await compareScreens(element(by.id('test-root')), '368');
  await element(by.id('percentage')).tap();

  console.log('386:WIDTH SMALLER THEN CONTENT WITH FLEX GROW UNCONSTRAINT SIZE');
  await element(by.text('386')).tap();
  await compareScreens(element(by.id('test-root')), '386');
  await element(by.id('width_smal')).tap();
}

describe('RUN ALL TESTS', () => {
  it('TEST ALL', async () => {
    console.log('0:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT CENTER');
    await element(by.text('0')).tap();
    await compareScreens(element(by.id('test-root')), '0');
    await element(by.id('absolute_l')).tap();
    console.log('1:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT CENTER AND BOTTOM POSITION');
    await element(by.text('1')).tap();
    await compareScreens(element(by.id('test-root')), '1');
    await element(by.id('absolute_l')).tap();
    console.log('2:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT CENTER AND LEFT POSITION');
    await element(by.text('2')).tap();
    await compareScreens(element(by.id('test-root')), '2');
    await element(by.id('absolute_l')).tap();
    console.log('3:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT CENTER AND RIGHT POSITION');
    await element(by.text('3')).tap();
    await compareScreens(element(by.id('test-root')), '3');
    await element(by.id('absolute_l')).tap();
    console.log('4:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT CENTER AND TOP POSITION');
    await element(by.text('4')).tap();
    await compareScreens(element(by.id('test-root')), '4');
    await element(by.id('absolute_l')).tap();
    console.log('5:ABSOLUTE LAYOUT ALIGN ITEMS AND JUSTIFY CONTENT FLEX END');
    await element(by.text('5')).tap();
    await compareScreens(element(by.id('test-root')), '5');
    await element(by.id('absolute_l')).tap();
    console.log('6:ABSOLUTE LAYOUT ALIGN ITEMS CENTER');
    await element(by.text('6')).tap();
    await compareScreens(element(by.id('test-root')), '6');
    await element(by.id('absolute_l')).tap();
    console.log('7:ABSOLUTE LAYOUT ALIGN ITEMS CENTER ON CHILD ONLY');
    await element(by.text('7')).tap();
    await compareScreens(element(by.id('test-root')), '7');
    await element(by.id('absolute_l')).tap();
    console.log('8:ABSOLUTE LAYOUT CHILD ORDER');
    await element(by.text('8')).tap();
    await compareScreens(element(by.id('test-root')), '8');
    await element(by.id('absolute_l')).tap();
    console.log('9:ABSOLUTE LAYOUT IN WRAP REVERSE COLUMN CONTAINER');
    await element(by.text('9')).tap();
    await compareScreens(element(by.id('test-root')), '9');
    await element(by.id('absolute_l')).tap();
    console.log('10:ABSOLUTE LAYOUT IN WRAP REVERSE COLUMN CONTAINER FLEX END');
    await element(by.text('10')).tap();
    await compareScreens(element(by.id('test-root')), '10');
    await element(by.id('absolute_l')).tap();
    console.log('11:ABSOLUTE LAYOUT IN WRAP REVERSE ROW CONTAINER');
    await element(by.text('11')).tap();
    await compareScreens(element(by.id('test-root')), '11');
    await element(by.id('absolute_l')).tap();
    console.log('12:ABSOLUTE LAYOUT IN WRAP REVERSE ROW CONTAINER FLEX END');
    await element(by.text('12')).tap();
    await compareScreens(element(by.id('test-root')), '12');
    await element(by.id('absolute_l')).tap();
    console.log('13:ABSOLUTE LAYOUT JUSTIFY CONTENT CENTER');
    await element(by.text('13')).tap();
    await compareScreens(element(by.id('test-root')), '13');
    await element(by.id('absolute_l')).tap();
    console.log('14:ABSOLUTE LAYOUT NO SIZE');
    await element(by.text('14')).tap();
    await compareScreens(element(by.id('test-root')), '14');
    await element(by.id('absolute_l')).tap();
    console.log('15:ABSOLUTE LAYOUT PERCENTAGE BOTTOM BASED ON PARENT HEIGHT');
    await element(by.text('15')).tap();
    await compareScreens(element(by.id('test-root')), '15');
    await element(by.id('absolute_l')).tap();
    console.log('16:ABSOLUTE LAYOUT START TOP END BOTTOM');
    await element(by.text('16')).tap();
    await compareScreens(element(by.id('test-root')), '16');
    await element(by.id('absolute_l')).tap();
    console.log('17:ABSOLUTE LAYOUT WIDTH HEIGHT END BOTTOM');
    await element(by.text('17')).tap();
    await compareScreens(element(by.id('test-root')), '17');
    await element(by.id('absolute_l')).tap();
    console.log('18:ABSOLUTE LAYOUT WIDTH HEIGHT START TOP');
    await element(by.text('18')).tap();
    await compareScreens(element(by.id('test-root')), '18');
    await element(by.id('absolute_l')).tap();
    console.log('19:ABSOLUTE LAYOUT WIDTH HEIGHT START TOP END BOTTOM');
    await element(by.text('19')).tap();
    await compareScreens(element(by.id('test-root')), '19');
    await element(by.id('absolute_l')).tap();
    console.log('20:ABSOLUTE LAYOUT WITHIN BORDER');
    await element(by.text('20')).tap();
    await compareScreens(element(by.id('test-root')), '20');
    await element(by.id('absolute_l')).tap();
    console.log('21:ALIGN BASELINE');
    await element(by.text('21')).tap();
    await compareScreens(element(by.id('test-root')), '21');
    await element(by.id('align_base')).tap();
    console.log('22:ALIGN BASELINE CHILD MULTILINE');
    await element(by.text('22')).tap();
    await compareScreens(element(by.id('test-root')), '22');
    await element(by.id('align_base')).tap();
    console.log('23:ALIGN BASELINE NESTED CHILD');
    await element(by.text('23')).tap();
    await compareScreens(element(by.id('test-root')), '23');
    await element(by.id('align_base')).tap();
    console.log('24:ALIGN CENTER SHOULD SIZE BASED ON CONTENT');
    await element(by.text('24')).tap();
    await compareScreens(element(by.id('test-root')), '24');
    await element(by.id('align_cent')).tap();
    console.log('25:ALIGN CONTENT SPACE AROUND SINGLE LINE');
    await element(by.text('25')).tap();
    await compareScreens(element(by.id('test-root')), '25');
    await element(by.id('align_cont')).tap();
    console.log('26:ALIGN CONTENT SPACE AROUND WRAPPED');
    await element(by.text('26')).tap();
    await compareScreens(element(by.id('test-root')), '26');
    await element(by.id('align_cont')).tap();
    console.log('27:ALIGN CONTENT SPACE BETWEEN SINGLE LINE');
    await element(by.text('27')).tap();
    await compareScreens(element(by.id('test-root')), '27');
    await element(by.id('align_cont')).tap();
    console.log('28:ALIGN CONTENT SPACE BETWEEN WRAPPED');
    await element(by.text('28')).tap();
    await compareScreens(element(by.id('test-root')), '28');
    await element(by.id('align_cont')).tap();
    console.log('29:ALIGN CONTENT SPACE EVENLY SINGLE LINE');
    await element(by.text('29')).tap();
    await compareScreens(element(by.id('test-root')), '29');
    await element(by.id('align_cont')).tap();
    console.log('30:ALIGN CONTENT SPACE EVENLY WRAPPED');
    await element(by.text('30')).tap();
    await compareScreens(element(by.id('test-root')), '30');
    await element(by.id('align_cont')).tap();
    console.log('31:ALIGN FLEX START WITH SHRINKING CHILDREN');
    await element(by.text('31')).tap();
    await compareScreens(element(by.id('test-root')), '31');
    await element(by.id('align_flex')).tap();
    console.log('32:ALIGN FLEX START WITH SHRINKING CHILDREN WITH STRETCH');
    await element(by.text('32')).tap();
    await compareScreens(element(by.id('test-root')), '32');
    await element(by.id('align_flex')).tap();
    console.log('33:ALIGN FLEX START WITH STRETCHING CHILDREN');
    await element(by.text('33')).tap();
    await compareScreens(element(by.id('test-root')), '33');
    await element(by.id('align_flex')).tap();
    console.log('34:ALIGN ITEMS CENTER');
    await element(by.text('34')).tap();
    await compareScreens(element(by.id('test-root')), '34');
    await element(by.id('align_item')).tap();
    console.log('35:ALIGN ITEMS CENTER CHILD WITH MARGIN BIGGER THAN PARENT');
    await element(by.text('35')).tap();
    await compareScreens(element(by.id('test-root')), '35');
    await element(by.id('align_item')).tap();
    console.log('36:ALIGN ITEMS CENTER CHILD WITHOUT MARGIN BIGGER THAN PARENT');
    await element(by.text('36')).tap();
    await compareScreens(element(by.id('test-root')), '36');
    await element(by.id('align_item')).tap();
    console.log('37:ALIGN ITEMS CENTER WITH CHILD MARGIN');
    await element(by.text('37')).tap();
    await compareScreens(element(by.id('test-root')), '37');
    await element(by.id('align_item')).tap();
    console.log('38:ALIGN ITEMS CENTER WITH CHILD TOP');
    await element(by.text('38')).tap();
    await compareScreens(element(by.id('test-root')), '38');
    await element(by.id('align_item')).tap();
    console.log('39:ALIGN ITEMS FLEX END');
    await element(by.text('39')).tap();
    await compareScreens(element(by.id('test-root')), '39');
    await element(by.id('align_item')).tap();
    console.log('40:ALIGN ITEMS FLEX END CHILD WITH MARGIN BIGGER THAN PARENT');
    await element(by.text('40')).tap();
    await compareScreens(element(by.id('test-root')), '40');
    await element(by.id('align_item')).tap();
    console.log('41:ALIGN ITEMS FLEX END CHILD WITHOUT MARGIN BIGGER THAN PARENT');
    await element(by.text('41')).tap();
    await compareScreens(element(by.id('test-root')), '41');
    await element(by.id('align_item')).tap();
    console.log('42:ALIGN ITEMS FLEX START');
    await element(by.text('42')).tap();
    await compareScreens(element(by.id('test-root')), '42');
    await element(by.id('align_item')).tap();
    console.log('43:ALIGN ITEMS MIN MAX');
    await element(by.text('43')).tap();
    await compareScreens(element(by.id('test-root')), '43');
    await element(by.id('align_item')).tap();
    console.log('44:ALIGN ITEMS STRETCH');
    await element(by.text('44')).tap();
    await compareScreens(element(by.id('test-root')), '44');
    await element(by.id('align_item')).tap();
    console.log('45:ALIGN SELF BASELINE');
    await element(by.text('45')).tap();
    await compareScreens(element(by.id('test-root')), '45');
    await element(by.id('align_self')).tap();
    console.log('46:ALIGN SELF CENTER');
    await element(by.text('46')).tap();
    await compareScreens(element(by.id('test-root')), '46');
    await element(by.id('align_self')).tap();
    console.log('47:ALIGN SELF FLEX END');
    await element(by.text('47')).tap();
    await compareScreens(element(by.id('test-root')), '47');
    await element(by.id('align_self')).tap();
    console.log('48:ALIGN SELF FLEX END OVERRIDE FLEX START');
    await element(by.text('48')).tap();
    await compareScreens(element(by.id('test-root')), '48');
    await element(by.id('align_self')).tap();
    console.log('49:ALIGN SELF FLEX START');
    await element(by.text('49')).tap();
    await compareScreens(element(by.id('test-root')), '49');
    await element(by.id('align_self')).tap();
    console.log('50:ALIGN STRETCH SHOULD SIZE BASED ON PARENT');
    await element(by.text('50')).tap();
    await compareScreens(element(by.id('test-root')), '50');
    await element(by.id('align_stre')).tap();
    console.log('51:BORDER CENTER CHILD');
    await element(by.text('51')).tap();
    await compareScreens(element(by.id('test-root')), '51');
    await element(by.id('border_cen')).tap();
    console.log('52:BORDER FLEX CHILD');
    await element(by.text('52')).tap();
    await compareScreens(element(by.id('test-root')), '52');
    await element(by.id('border_fle')).tap();
    console.log('53:BORDER NO CHILD');
    await element(by.text('53')).tap();
    await compareScreens(element(by.id('test-root')), '53');
    await element(by.id('border_no_')).tap();
    console.log('54:BORDER STRETCH CHILD');
    await element(by.text('54')).tap();
    await compareScreens(element(by.id('test-root')), '54');
    await element(by.id('border_str')).tap();
    console.log('55:CHILD MIN MAX WIDTH FLEXING');
    await element(by.text('55')).tap();
    await compareScreens(element(by.id('test-root')), '55');
    await element(by.id('child_min_')).tap();
    console.log('56:CONTAINER WITH UNSIZED CHILD');
    await element(by.text('56')).tap();
    await compareScreens(element(by.id('test-root')), '56');
    await element(by.id('container_')).tap();
    console.log('57:DISPLAY NONE');
    await element(by.text('57')).tap();
    await compareScreens(element(by.id('test-root')), '57');
    await element(by.id('display_no')).tap();
    console.log('58:DISPLAY NONE FIXED SIZE');
    await element(by.text('58')).tap();
    await compareScreens(element(by.id('test-root')), '58');
    await element(by.id('display_no')).tap();
    console.log('59:DISPLAY NONE WITH CHILD');
    await element(by.text('59')).tap();
    await compareScreens(element(by.id('test-root')), '59');
    await element(by.id('display_no')).tap();
    console.log('60:DISPLAY NONE WITH MARGIN');
    await element(by.text('60')).tap();
    await compareScreens(element(by.id('test-root')), '60');
    await element(by.id('display_no')).tap();
    console.log('61:DISPLAY NONE WITH POSITION');
    await element(by.text('61')).tap();
    await compareScreens(element(by.id('test-root')), '61');
    await element(by.id('display_no')).tap();
    console.log('62:FLEX BASIS AND MAIN DIMEN SET WHEN FLEXING');
    await element(by.text('62')).tap();
    await compareScreens(element(by.id('test-root')), '62');
    await element(by.id('flex_basis')).tap();
    console.log('63:FLEX BASIS FLEX GROW COLUMN');
    await element(by.text('63')).tap();
    await compareScreens(element(by.id('test-root')), '63');
    await element(by.id('flex_basis')).tap();
    console.log('64:FLEX BASIS FLEX GROW ROW');
    await element(by.text('64')).tap();
    await compareScreens(element(by.id('test-root')), '64');
    await element(by.id('flex_basis')).tap();
    console.log('65:FLEX BASIS FLEX SHRINK COLUMN');
    await element(by.text('65')).tap();
    await compareScreens(element(by.id('test-root')), '65');
    await element(by.id('flex_basis')).tap();
    console.log('66:FLEX BASIS FLEX SHRINK ROW');
    await element(by.text('66')).tap();
    await compareScreens(element(by.id('test-root')), '66');
    await element(by.id('flex_basis')).tap();
    console.log('67:FLEX BASIS LARGER THAN CONTENT COLUMN');
    await element(by.text('67')).tap();
    await compareScreens(element(by.id('test-root')), '67');
    await element(by.id('flex_basis')).tap();
    console.log('68:FLEX BASIS LARGER THAN CONTENT ROW');
    await element(by.text('68')).tap();
    await compareScreens(element(by.id('test-root')), '68');
    await element(by.id('flex_basis')).tap();
    console.log('69:FLEX BASIS OVERRIDES MAIN SIZE');
    await element(by.text('69')).tap();
    await compareScreens(element(by.id('test-root')), '69');
    await element(by.id('flex_basis')).tap();
    console.log('70:FLEX BASIS SLIGHTLY SMALLER THEN CONTENT WITH FLEX GROW LARGE SIZE');
    await element(by.text('70')).tap();
    await compareScreens(element(by.id('test-root')), '70');
    await element(by.id('flex_basis')).tap();
    console.log('71:FLEX BASIS SMALLER THAN CONTENT COLUMN');
    await element(by.text('71')).tap();
    await compareScreens(element(by.id('test-root')), '71');
    await element(by.id('flex_basis')).tap();
    console.log('72:FLEX BASIS SMALLER THAN CONTENT ROW');
    await element(by.text('72')).tap();
    await compareScreens(element(by.id('test-root')), '72');
    await element(by.id('flex_basis')).tap();
    console.log('73:FLEX BASIS SMALLER THAN MAIN DIMEN COLUMN');
    await element(by.text('73')).tap();
    await compareScreens(element(by.id('test-root')), '73');
    await element(by.id('flex_basis')).tap();
    console.log('74:FLEX BASIS SMALLER THAN MAIN DIMEN ROW');
    await element(by.text('74')).tap();
    await compareScreens(element(by.id('test-root')), '74');
    await element(by.id('flex_basis')).tap();
    console.log('75:FLEX BASIS SMALLER THEN CONTENT WITH FLEX GROW LARGE SIZE');
    await element(by.text('75')).tap();
    await compareScreens(element(by.id('test-root')), '75');
    await element(by.id('flex_basis')).tap();
    console.log('76:FLEX BASIS SMALLER THEN CONTENT WITH FLEX GROW SMALL SIZE');
    await element(by.text('76')).tap();
    await compareScreens(element(by.id('test-root')), '76');
    await element(by.id('flex_basis')).tap();
    console.log('77:FLEX BASIS SMALLER THEN CONTENT WITH FLEX GROW UNCONSTRAINT SIZE');
    await element(by.text('77')).tap();
    await compareScreens(element(by.id('test-root')), '77');
    await element(by.id('flex_basis')).tap();
    console.log('78:FLEX BASIS SMALLER THEN CONTENT WITH FLEX GROW VERY LARGE SIZE');
    await element(by.text('78')).tap();
    await compareScreens(element(by.id('test-root')), '78');
    await element(by.id('flex_basis')).tap();
    console.log('81:FLEX DIRECTION COLUMN');
    await element(by.text('81')).tap();
    await compareScreens(element(by.id('test-root')), '81');
    await element(by.id('flex_direc')).tap();
    console.log('82:FLEX DIRECTION COLUMN NO HEIGHT');
    await element(by.text('82')).tap();
    await compareScreens(element(by.id('test-root')), '82');
    await element(by.id('flex_direc')).tap();
    console.log('83:FLEX DIRECTION COLUMN REVERSE');
    await element(by.text('83')).tap();
    await compareScreens(element(by.id('test-root')), '83');
    await element(by.id('flex_direc')).tap();
    console.log('84:FLEX DIRECTION ROW');
    await element(by.text('84')).tap();
    await compareScreens(element(by.id('test-root')), '84');
    await element(by.id('flex_direc')).tap();
    console.log('85:FLEX DIRECTION ROW NO WIDTH');
    await element(by.text('85')).tap();
    await compareScreens(element(by.id('test-root')), '85');
    await element(by.id('flex_direc')).tap();
    console.log('86:FLEX DIRECTION ROW REVERSE');
    await element(by.text('86')).tap();
    await compareScreens(element(by.id('test-root')), '86');
    await element(by.id('flex_direc')).tap();
    console.log('88:FLEX GROW FLEX BASIS PERCENT MIN MAX');
    await element(by.text('88')).tap();
    await compareScreens(element(by.id('test-root')), '88');
    await element(by.id('flex_grow_')).tap();
    console.log('89:FLEX GROW HEIGHT MAXIMIZED');
    await element(by.text('89')).tap();
    await compareScreens(element(by.id('test-root')), '89');
    await element(by.id('flex_grow_')).tap();
    console.log('90:FLEX GROW IN AT MOST CONTAINER');
    await element(by.text('90')).tap();
    await compareScreens(element(by.id('test-root')), '90');
    await element(by.id('flex_grow_')).tap();
    console.log('91:FLEX GROW LESS THAN FACTOR ONE');
    await element(by.text('91')).tap();
    await compareScreens(element(by.id('test-root')), '91');
    await element(by.id('flex_grow_')).tap();
    console.log('92:FLEX GROW ROOT MINIMIZED');
    await element(by.text('92')).tap();
    await compareScreens(element(by.id('test-root')), '92');
    await element(by.id('flex_grow_')).tap();
    console.log('93:FLEX GROW SHRINK AT MOST');
    await element(by.text('93')).tap();
    await compareScreens(element(by.id('test-root')), '93');
    await element(by.id('flex_grow_')).tap();
    console.log('94:FLEX GROW TO MIN');
    await element(by.text('94')).tap();
    await compareScreens(element(by.id('test-root')), '94');
    await element(by.id('flex_grow_')).tap();
    console.log('96:FLEX GROW WITHIN CONSTRAINED MAX ROW');
    await element(by.text('96')).tap();
    await compareScreens(element(by.id('test-root')), '96');
    await element(by.id('flex_grow_')).tap();
    console.log('97:FLEX GROW WITHIN CONSTRAINED MAX WIDTH');
    await element(by.text('97')).tap();
    await compareScreens(element(by.id('test-root')), '97');
    await element(by.id('flex_grow_')).tap();
    console.log('100:FLEX GROW WITHIN CONSTRAINED MIN ROW');
    await element(by.text('100')).tap();
    await compareScreens(element(by.id('test-root')), '100');
    await element(by.id('flex_grow_')).tap();
    console.log('101:FLEX GROW WITHIN MAX WIDTH');
    await element(by.text('101')).tap();
    await compareScreens(element(by.id('test-root')), '101');
    await element(by.id('flex_grow_')).tap();
    console.log('102:FLEX ROOT IGNORED');
    await element(by.text('102')).tap();
    await compareScreens(element(by.id('test-root')), '102');
    await element(by.id('flex_root_')).tap();
    console.log('104:FLEX SHRINK FLEX GROW CHILD FLEX SHRINK OTHER CHILD');
    await element(by.text('104')).tap();
    await compareScreens(element(by.id('test-root')), '104');
    await element(by.id('flex_shrin')).tap();
    console.log('105:FLEX SHRINK FLEX GROW ROW');
    await element(by.text('105')).tap();
    await compareScreens(element(by.id('test-root')), '105');
    await element(by.id('flex_shrin')).tap();
    console.log('106:FLEX SHRINK TO ZERO');
    await element(by.text('106')).tap();
    await compareScreens(element(by.id('test-root')), '106');
    await element(by.id('flex_shrin')).tap();
    console.log('107:FLEX WRAP ALIGN STRETCH FITS ONE ROW');
    await element(by.text('107')).tap();
    await compareScreens(element(by.id('test-root')), '107');
    await element(by.id('flex_wrap_')).tap();
    console.log('108:FLEX WRAP CHILDREN WITH MIN MAIN OVERRIDING FLEX BASIS');
    await element(by.text('108')).tap();
    await compareScreens(element(by.id('test-root')), '108');
    await element(by.id('flex_wrap_')).tap();
    console.log('109:FLEX WRAP WRAP TO CHILD HEIGHT');
    await element(by.text('109')).tap();
    await compareScreens(element(by.id('test-root')), '109');
    await element(by.id('flex_wrap_')).tap();
    console.log('110:GAP COLUMN GAP CHILD MARGINS');
    await element(by.text('110')).tap();
    await compareScreens(element(by.id('test-root')), '110');
    await element(by.id('gap_column')).tap();
    console.log('111:GAP COLUMN GAP DETERMINES PARENT WIDTH');
    await element(by.text('111')).tap();
    await compareScreens(element(by.id('test-root')), '111');
    await element(by.id('gap_column')).tap();
    console.log('112:GAP COLUMN GAP FLEXIBLE');
    await element(by.text('112')).tap();
    await compareScreens(element(by.id('test-root')), '112');
    await element(by.id('gap_column')).tap();
    console.log('113:GAP COLUMN GAP FLEXIBLE UNDEFINED PARENT');
    await element(by.text('113')).tap();
    await compareScreens(element(by.id('test-root')), '113');
    await element(by.id('gap_column')).tap();
    console.log('114:GAP COLUMN GAP INFLEXIBLE');
    await element(by.text('114')).tap();
    await compareScreens(element(by.id('test-root')), '114');
    await element(by.id('gap_column')).tap();
    console.log('115:GAP COLUMN GAP INFLEXIBLE UNDEFINED PARENT');
    await element(by.text('115')).tap();
    await compareScreens(element(by.id('test-root')), '115');
    await element(by.id('gap_column')).tap();
    console.log('116:GAP COLUMN GAP JUSTIFY CENTER');
    await element(by.text('116')).tap();
    await compareScreens(element(by.id('test-root')), '116');
    await element(by.id('gap_column')).tap();
    console.log('117:GAP COLUMN GAP JUSTIFY FLEX END');
    await element(by.text('117')).tap();
    await compareScreens(element(by.id('test-root')), '117');
    await element(by.id('gap_column')).tap();
    console.log('118:GAP COLUMN GAP JUSTIFY FLEX START');
    await element(by.text('118')).tap();
    await compareScreens(element(by.id('test-root')), '118');
    await element(by.id('gap_column')).tap();
    console.log('119:GAP COLUMN GAP JUSTIFY SPACE AROUND');
    await element(by.text('119')).tap();
    await compareScreens(element(by.id('test-root')), '119');
    await element(by.id('gap_column')).tap();
    console.log('120:GAP COLUMN GAP JUSTIFY SPACE BETWEEN');
    await element(by.text('120')).tap();
    await compareScreens(element(by.id('test-root')), '120');
    await element(by.id('gap_column')).tap();
    console.log('121:GAP COLUMN GAP JUSTIFY SPACE EVENLY');
    await element(by.text('121')).tap();
    await compareScreens(element(by.id('test-root')), '121');
    await element(by.id('gap_column')).tap();
    console.log('122:GAP COLUMN GAP MIXED FLEXIBLE');
    await element(by.text('122')).tap();
    await compareScreens(element(by.id('test-root')), '122');
    await element(by.id('gap_column')).tap();
    console.log('123:GAP COLUMN GAP PERCENTAGE CYCLIC PARTIALLY SHRINKABLE');
    await element(by.text('123')).tap();
    await compareScreens(element(by.id('test-root')), '123');
    await element(by.id('gap_column')).tap();
    console.log('124:GAP COLUMN GAP PERCENTAGE CYCLIC SHRINKABLE');
    await element(by.text('124')).tap();
    await compareScreens(element(by.id('test-root')), '124');
    await element(by.id('gap_column')).tap();
    console.log('125:GAP COLUMN GAP PERCENTAGE CYCLIC UNSHRINKABLE');
    await element(by.text('125')).tap();
    await compareScreens(element(by.id('test-root')), '125');
    await element(by.id('gap_column')).tap();
    console.log('126:GAP COLUMN GAP PERCENTAGE FLEXIBLE');
    await element(by.text('126')).tap();
    await compareScreens(element(by.id('test-root')), '126');
    await element(by.id('gap_column')).tap();
    console.log('127:GAP COLUMN GAP PERCENTAGE FLEXIBLE WITH PADDING');
    await element(by.text('127')).tap();
    await compareScreens(element(by.id('test-root')), '127');
    await element(by.id('gap_column')).tap();
    console.log('128:GAP COLUMN GAP PERCENTAGE INFLEXIBLE');
    await element(by.text('128')).tap();
    await compareScreens(element(by.id('test-root')), '128');
    await element(by.id('gap_column')).tap();
    console.log('129:GAP COLUMN GAP WRAP ALIGN CENTER');
    await element(by.text('129')).tap();
    await compareScreens(element(by.id('test-root')), '129');
    await element(by.id('gap_column')).tap();
    console.log('130:GAP COLUMN GAP WRAP ALIGN FLEX END');
    await element(by.text('130')).tap();
    await compareScreens(element(by.id('test-root')), '130');
    await element(by.id('gap_column')).tap();
    console.log('131:GAP COLUMN GAP WRAP ALIGN FLEX START');
    await element(by.text('131')).tap();
    await compareScreens(element(by.id('test-root')), '131');
    await element(by.id('gap_column')).tap();
    console.log('132:GAP COLUMN GAP WRAP ALIGN SPACE AROUND');
    await element(by.text('132')).tap();
    await compareScreens(element(by.id('test-root')), '132');
    await element(by.id('gap_column')).tap();
    console.log('133:GAP COLUMN GAP WRAP ALIGN SPACE BETWEEN');
    await element(by.text('133')).tap();
    await compareScreens(element(by.id('test-root')), '133');
    await element(by.id('gap_column')).tap();
    console.log('134:GAP COLUMN GAP WRAP ALIGN STRETCH');
    await element(by.text('134')).tap();
    await compareScreens(element(by.id('test-root')), '134');
    await element(by.id('gap_column')).tap();
    console.log('135:GAP COLUMN ROW GAP WRAPPING');
    await element(by.text('135')).tap();
    await compareScreens(element(by.id('test-root')), '135');
    await element(by.id('gap_column')).tap();
    console.log('136:GAP PERCENTAGE ROW GAP WRAPPING');
    await element(by.text('136')).tap();
    await compareScreens(element(by.id('test-root')), '136');
    await element(by.id('gap_percen')).tap();
    console.log('137:GAP ROW GAP ALIGN ITEMS END');
    await element(by.text('137')).tap();
    await compareScreens(element(by.id('test-root')), '137');
    await element(by.id('gap_row_ga')).tap();
    console.log('138:GAP ROW GAP ALIGN ITEMS STRETCH');
    await element(by.text('138')).tap();
    await compareScreens(element(by.id('test-root')), '138');
    await element(by.id('gap_row_ga')).tap();
    console.log('139:GAP ROW GAP COLUMN CHILD MARGINS');
    await element(by.text('139')).tap();
    await compareScreens(element(by.id('test-root')), '139');
    await element(by.id('gap_row_ga')).tap();
    console.log('140:GAP ROW GAP DETERMINES PARENT HEIGHT');
    await element(by.text('140')).tap();
    await compareScreens(element(by.id('test-root')), '140');
    await element(by.id('gap_row_ga')).tap();
    console.log('141:GAP ROW GAP ROW WRAP CHILD MARGINS');
    await element(by.text('141')).tap();
    await compareScreens(element(by.id('test-root')), '141');
    await element(by.id('gap_row_ga')).tap();
    console.log('142:GRID ABSOLUTE ALIGN SELF SIZED ALL');
    await element(by.text('142')).tap();
    await compareScreens(element(by.id('test-root')), '142');
    await element(by.id('grid_absol')).tap();
    console.log('143:GRID ABSOLUTE COLUMN END');
    await element(by.text('143')).tap();
    await compareScreens(element(by.id('test-root')), '143');
    await element(by.id('grid_absol')).tap();
    console.log('144:GRID ABSOLUTE COLUMN START');
    await element(by.text('144')).tap();
    await compareScreens(element(by.id('test-root')), '144');
    await element(by.id('grid_absol')).tap();
    console.log('145:GRID ABSOLUTE CONTAINER BOTTOM LEFT');
    await element(by.text('145')).tap();
    await compareScreens(element(by.id('test-root')), '145');
    await element(by.id('grid_absol')).tap();
    console.log('146:GRID ABSOLUTE CONTAINER BOTTOM LEFT MARGIN');
    await element(by.text('146')).tap();
    await compareScreens(element(by.id('test-root')), '146');
    await element(by.id('grid_absol')).tap();
    console.log('147:GRID ABSOLUTE CONTAINER LEFT OVERRIDES RIGHT');
    await element(by.text('147')).tap();
    await compareScreens(element(by.id('test-root')), '147');
    await element(by.id('grid_absol')).tap();
    console.log('148:GRID ABSOLUTE CONTAINER LEFT RIGHT');
    await element(by.text('148')).tap();
    await compareScreens(element(by.id('test-root')), '148');
    await element(by.id('grid_absol')).tap();
    console.log('149:GRID ABSOLUTE CONTAINER LEFT RIGHT MARGIN');
    await element(by.text('149')).tap();
    await compareScreens(element(by.id('test-root')), '149');
    await element(by.id('grid_absol')).tap();
    console.log('150:GRID ABSOLUTE CONTAINER NEGATIVE POSITION');
    await element(by.text('150')).tap();
    await compareScreens(element(by.id('test-root')), '150');
    await element(by.id('grid_absol')).tap();
    console.log('151:GRID ABSOLUTE CONTAINER NEGATIVE POSITION MARGIN');
    await element(by.text('151')).tap();
    await compareScreens(element(by.id('test-root')), '151');
    await element(by.id('grid_absol')).tap();
    console.log('152:GRID ABSOLUTE CONTAINER TOP BOTTOM');
    await element(by.text('152')).tap();
    await compareScreens(element(by.id('test-root')), '152');
    await element(by.id('grid_absol')).tap();
    console.log('153:GRID ABSOLUTE CONTAINER TOP BOTTOM MARGIN');
    await element(by.text('153')).tap();
    await compareScreens(element(by.id('test-root')), '153');
    await element(by.id('grid_absol')).tap();
    console.log('154:GRID ABSOLUTE CONTAINER TOP RIGHT');
    await element(by.text('154')).tap();
    await compareScreens(element(by.id('test-root')), '154');
    await element(by.id('grid_absol')).tap();
    console.log('155:GRID ABSOLUTE CONTAINER TOP RIGHT MARGIN');
    await element(by.text('155')).tap();
    await compareScreens(element(by.id('test-root')), '155');
    await element(by.id('grid_absol')).tap();
    console.log('156:GRID ABSOLUTE JUSTIFY SELF SIZED ALL');
    await element(by.text('156')).tap();
    await compareScreens(element(by.id('test-root')), '156');
    await element(by.id('grid_absol')).tap();
    console.log('157:GRID ABSOLUTE ROW END');
    await element(by.text('157')).tap();
    await compareScreens(element(by.id('test-root')), '157');
    await element(by.id('grid_absol')).tap();
    console.log('158:GRID ABSOLUTE ROW START');
    await element(by.text('158')).tap();
    await compareScreens(element(by.id('test-root')), '158');
    await element(by.id('grid_absol')).tap();
    console.log('159:GRID ABSOLUTE TOP OVERRIDES BOTTOM');
    await element(by.text('159')).tap();
    await compareScreens(element(by.id('test-root')), '159');
    await element(by.id('grid_absol')).tap();
    console.log('160:GRID ABSOLUTE WITH PADDING');
    await element(by.text('160')).tap();
    await compareScreens(element(by.id('test-root')), '160');
    await element(by.id('grid_absol')).tap();
    console.log('161:GRID ABSOLUTE WITH PADDING AND MARGIN');
    await element(by.text('161')).tap();
    await compareScreens(element(by.id('test-root')), '161');
    await element(by.id('grid_absol')).tap();
    console.log('162:GRID ALIGN CONTENT CENTER');
    await element(by.text('162')).tap();
    await compareScreens(element(by.id('test-root')), '162');
    await element(by.id('grid_align')).tap();
    console.log('163:GRID ALIGN CONTENT END');
    await element(by.text('163')).tap();
    await compareScreens(element(by.id('test-root')), '163');
    await element(by.id('grid_align')).tap();
    console.log('164:GRID ALIGN CONTENT END WITH PADDING BORDER');
    await element(by.text('164')).tap();
    await compareScreens(element(by.id('test-root')), '164');
    await element(by.id('grid_align')).tap();
    console.log('165:GRID ALIGN CONTENT SPACE AROUND');
    await element(by.text('165')).tap();
    await compareScreens(element(by.id('test-root')), '165');
    await element(by.id('grid_align')).tap();
    console.log('166:GRID ALIGN CONTENT SPACE AROUND WITH PADDING BORDER');
    await element(by.text('166')).tap();
    await compareScreens(element(by.id('test-root')), '166');
    await element(by.id('grid_align')).tap();
    console.log('167:GRID ALIGN CONTENT SPACE BETWEEN');
    await element(by.text('167')).tap();
    await compareScreens(element(by.id('test-root')), '167');
    await element(by.id('grid_align')).tap();
    console.log('168:GRID ALIGN CONTENT SPACE BETWEEN WITH PADDING BORDER');
    await element(by.text('168')).tap();
    await compareScreens(element(by.id('test-root')), '168');
    await element(by.id('grid_align')).tap();
    console.log('169:GRID ALIGN CONTENT SPACE EVENLY');
    await element(by.text('169')).tap();
    await compareScreens(element(by.id('test-root')), '169');
    await element(by.id('grid_align')).tap();
    console.log('170:GRID ALIGN CONTENT SPACE EVENLY WITH PADDING BORDER');
    await element(by.text('170')).tap();
    await compareScreens(element(by.id('test-root')), '170');
    await element(by.id('grid_align')).tap();
    console.log('171:GRID ALIGN CONTENT START');
    await element(by.text('171')).tap();
    await compareScreens(element(by.id('test-root')), '171');
    await element(by.id('grid_align')).tap();
    console.log('172:GRID ALIGN CONTENT START WITH PADDING BORDER');
    await element(by.text('172')).tap();
    await compareScreens(element(by.id('test-root')), '172');
    await element(by.id('grid_align')).tap();
    console.log('173:GRID ALIGN ITEMS SIZED CENTER');
    await element(by.text('173')).tap();
    await compareScreens(element(by.id('test-root')), '173');
    await element(by.id('grid_align')).tap();
    console.log('174:GRID ALIGN ITEMS SIZED END');
    await element(by.text('174')).tap();
    await compareScreens(element(by.id('test-root')), '174');
    await element(by.id('grid_align')).tap();
    console.log('175:GRID ALIGN ITEMS SIZED START');
    await element(by.text('175')).tap();
    await compareScreens(element(by.id('test-root')), '175');
    await element(by.id('grid_align')).tap();
    console.log('176:GRID ALIGN ITEMS SIZED STRETCH');
    await element(by.text('176')).tap();
    await compareScreens(element(by.id('test-root')), '176');
    await element(by.id('grid_align')).tap();
    console.log('177:GRID ALIGN SELF SIZED ALL');
    await element(by.text('177')).tap();
    await compareScreens(element(by.id('test-root')), '177');
    await element(by.id('grid_align')).tap();
    console.log('179:GRID AUTO FILL FIXED SIZE');
    await element(by.text('179')).tap();
    await compareScreens(element(by.id('test-root')), '179');
    await element(by.id('grid_auto_')).tap();
    console.log('180:GRID AUTO FILL WITH EMPTY AUTO TRACK');
    await element(by.text('180')).tap();
    await compareScreens(element(by.id('test-root')), '180');
    await element(by.id('grid_auto_')).tap();
    console.log('181:GRID AUTO FIT WITH EMPTY AUTO TRACK');
    await element(by.text('181')).tap();
    await compareScreens(element(by.id('test-root')), '181');
    await element(by.id('grid_auto_')).tap();
    console.log('185:GRID BASIC');
    await element(by.text('185')).tap();
    await compareScreens(element(by.id('test-root')), '185');
    await element(by.id('grid_basic')).tap();
    console.log('186:GRID BASIC IMPLICIT TRACKS');
    await element(by.text('186')).tap();
    await compareScreens(element(by.id('test-root')), '186');
    await element(by.id('grid_basic')).tap();
    console.log('187:GRID BASIC WITH OVERFLOW');
    await element(by.text('187')).tap();
    await compareScreens(element(by.id('test-root')), '187');
    await element(by.id('grid_basic')).tap();
    console.log('188:GRID BASIC WITH PADDING');
    await element(by.text('188')).tap();
    await compareScreens(element(by.id('test-root')), '188');
    await element(by.id('grid_basic')).tap();
    console.log('189:GRID FIT CONTENT POINTS ARGUMENT');
    await element(by.text('189')).tap();
    await compareScreens(element(by.id('test-root')), '189');
    await element(by.id('grid_fit_c')).tap();
    console.log('190:GRID FIT CONTENT POINTS MAX CONTENT');
    await element(by.text('190')).tap();
    await compareScreens(element(by.id('test-root')), '190');
    await element(by.id('grid_fit_c')).tap();
    console.log('191:GRID FIT CONTENT POINTS MIN CONTENT');
    await element(by.text('191')).tap();
    await compareScreens(element(by.id('test-root')), '191');
    await element(by.id('grid_fit_c')).tap();
    console.log('194:GRID FR FIXED SIZE NO CONTENT');
    await element(by.text('194')).tap();
    await compareScreens(element(by.id('test-root')), '194');
    await element(by.id('grid_fr_fi')).tap();
    console.log('195:GRID FR FIXED SIZE SINGLE ITEM');
    await element(by.text('195')).tap();
    await compareScreens(element(by.id('test-root')), '195');
    await element(by.id('grid_fr_fi')).tap();
    console.log('196:GRID GAP');
    await element(by.text('196')).tap();
    await compareScreens(element(by.id('test-root')), '196');
    await element(by.id('grid_gap')).tap();
    console.log('197:GRID HIDDEN');
    await element(by.text('197')).tap();
    await compareScreens(element(by.id('test-root')), '197');
    await element(by.id('grid_hidde')).tap();
    console.log('198:GRID JUSTIFY CONTENT CENTER');
    await element(by.text('198')).tap();
    await compareScreens(element(by.id('test-root')), '198');
    await element(by.id('grid_justi')).tap();
    console.log('199:GRID JUSTIFY CONTENT CENTER WITH PADDING BORDER');
    await element(by.text('199')).tap();
    await compareScreens(element(by.id('test-root')), '199');
    await element(by.id('grid_justi')).tap();
    console.log('200:GRID JUSTIFY CONTENT END');
    await element(by.text('200')).tap();
    await compareScreens(element(by.id('test-root')), '200');
    await element(by.id('grid_justi')).tap();
    console.log('201:GRID JUSTIFY CONTENT END WITH PADDING BORDER');
    await element(by.text('201')).tap();
    await compareScreens(element(by.id('test-root')), '201');
    await element(by.id('grid_justi')).tap();
    console.log('202:GRID JUSTIFY CONTENT SPACE AROUND');
    await element(by.text('202')).tap();
    await compareScreens(element(by.id('test-root')), '202');
    await element(by.id('grid_justi')).tap();
    console.log('203:GRID JUSTIFY CONTENT SPACE AROUND WITH PADDING BORDER');
    await element(by.text('203')).tap();
    await compareScreens(element(by.id('test-root')), '203');
    await element(by.id('grid_justi')).tap();
    console.log('204:GRID JUSTIFY CONTENT SPACE BETWEEN');
    await element(by.text('204')).tap();
    await compareScreens(element(by.id('test-root')), '204');
    await element(by.id('grid_justi')).tap();
    console.log('205:GRID JUSTIFY CONTENT SPACE BETWEEN WITH PADDING BORDER');
    await element(by.text('205')).tap();
    await compareScreens(element(by.id('test-root')), '205');
    await element(by.id('grid_justi')).tap();
    console.log('206:GRID JUSTIFY CONTENT SPACE EVENLY');
    await element(by.text('206')).tap();
    await compareScreens(element(by.id('test-root')), '206');
    await element(by.id('grid_justi')).tap();
    console.log('207:GRID JUSTIFY CONTENT SPACE EVENLY WITH PADDING BORDER');
    await element(by.text('207')).tap();
    await compareScreens(element(by.id('test-root')), '207');
    await element(by.id('grid_justi')).tap();
    console.log('208:GRID JUSTIFY CONTENT START');
    await element(by.text('208')).tap();
    await compareScreens(element(by.id('test-root')), '208');
    await element(by.id('grid_justi')).tap();
    console.log('209:GRID JUSTIFY CONTENT START WITH PADDING BORDER');
    await element(by.text('209')).tap();
    await compareScreens(element(by.id('test-root')), '209');
    await element(by.id('grid_justi')).tap();
    console.log('210:GRID JUSTIFY ITEMS SIZED CENTER');
    await element(by.text('210')).tap();
    await compareScreens(element(by.id('test-root')), '210');
    await element(by.id('grid_justi')).tap();
    console.log('211:GRID JUSTIFY ITEMS SIZED END');
    await element(by.text('211')).tap();
    await compareScreens(element(by.id('test-root')), '211');
    await element(by.id('grid_justi')).tap();
    console.log('212:GRID JUSTIFY ITEMS SIZED START');
    await element(by.text('212')).tap();
    await compareScreens(element(by.id('test-root')), '212');
    await element(by.id('grid_justi')).tap();
    console.log('213:GRID JUSTIFY ITEMS SIZED STRETCH');
    await element(by.text('213')).tap();
    await compareScreens(element(by.id('test-root')), '213');
    await element(by.id('grid_justi')).tap();
    console.log('214:GRID JUSTIFY SELF SIZED ALL');
    await element(by.text('214')).tap();
    await compareScreens(element(by.id('test-root')), '214');
    await element(by.id('grid_justi')).tap();
    console.log('215:GRID MARGINS AUTO MARGINS');
    await element(by.text('215')).tap();
    await compareScreens(element(by.id('test-root')), '215');
    await element(by.id('grid_margi')).tap();
    console.log('216:GRID MARGINS AUTO MARGINS OVERRIDE STRETCH');
    await element(by.text('216')).tap();
    await compareScreens(element(by.id('test-root')), '216');
    await element(by.id('grid_margi')).tap();
    console.log('217:GRID MARGINS FIXED CENTER');
    await element(by.text('217')).tap();
    await compareScreens(element(by.id('test-root')), '217');
    await element(by.id('grid_margi')).tap();
    console.log('218:GRID MARGINS FIXED END');
    await element(by.text('218')).tap();
    await compareScreens(element(by.id('test-root')), '218');
    await element(by.id('grid_margi')).tap();
    console.log('219:GRID MARGINS FIXED START');
    await element(by.text('219')).tap();
    await compareScreens(element(by.id('test-root')), '219');
    await element(by.id('grid_margi')).tap();
    console.log('220:GRID MARGINS FIXED STRETCH');
    await element(by.text('220')).tap();
    await compareScreens(element(by.id('test-root')), '220');
    await element(by.id('grid_margi')).tap();
    console.log('221:GRID MARGINS PERCENT CENTER');
    await element(by.text('221')).tap();
    await compareScreens(element(by.id('test-root')), '221');
    await element(by.id('grid_margi')).tap();
    console.log('222:GRID MARGINS PERCENT END');
    await element(by.text('222')).tap();
    await compareScreens(element(by.id('test-root')), '222');
    await element(by.id('grid_margi')).tap();
    console.log('223:GRID MARGINS PERCENT START');
    await element(by.text('223')).tap();
    await compareScreens(element(by.id('test-root')), '223');
    await element(by.id('grid_margi')).tap();
    console.log('224:GRID MARGINS PERCENT STRETCH');
    await element(by.text('224')).tap();
    await compareScreens(element(by.id('test-root')), '224');
    await element(by.id('grid_margi')).tap();
    console.log('225:GRID MAX CONTENT MAXIMUM SINGLE ITEM');
    await element(by.text('225')).tap();
    await compareScreens(element(by.id('test-root')), '225');
    await element(by.id('grid_max_c')).tap();
    console.log('226:GRID MAX CONTENT SINGLE ITEM');
    await element(by.text('226')).tap();
    await compareScreens(element(by.id('test-root')), '226');
    await element(by.id('grid_max_c')).tap();
    console.log('227:GRID MAX CONTENT SINGLE ITEM MARGIN AUTO');
    await element(by.text('227')).tap();
    await compareScreens(element(by.id('test-root')), '227');
    await element(by.id('grid_max_c')).tap();
    console.log('228:GRID MAX CONTENT SINGLE ITEM MARGIN FIXED');
    await element(by.text('228')).tap();
    await compareScreens(element(by.id('test-root')), '228');
    await element(by.id('grid_max_c')).tap();
    console.log('229:GRID MAX CONTENT SINGLE ITEM MARGIN PERCENT');
    await element(by.text('229')).tap();
    await compareScreens(element(by.id('test-root')), '229');
    await element(by.id('grid_max_c')).tap();
    console.log('230:GRID MIN CONTENT FLEX COLUMN');
    await element(by.text('230')).tap();
    await compareScreens(element(by.id('test-root')), '230');
    await element(by.id('grid_min_c')).tap();
    console.log('231:GRID MIN CONTENT FLEX ROW');
    await element(by.text('231')).tap();
    await compareScreens(element(by.id('test-root')), '231');
    await element(by.id('grid_min_c')).tap();
    console.log('232:GRID MIN CONTENT FLEX SINGLE ITEM');
    await element(by.text('232')).tap();
    await compareScreens(element(by.id('test-root')), '232');
    await element(by.id('grid_min_c')).tap();
    console.log('233:GRID MIN CONTENT FLEX SINGLE ITEM MARGIN AUTO');
    await element(by.text('233')).tap();
    await compareScreens(element(by.id('test-root')), '233');
    await element(by.id('grid_min_c')).tap();
    console.log('234:GRID MIN CONTENT FLEX SINGLE ITEM MARGIN FIXED');
    await element(by.text('234')).tap();
    await compareScreens(element(by.id('test-root')), '234');
    await element(by.id('grid_min_c')).tap();
    console.log('235:GRID MIN CONTENT FLEX SINGLE ITEM MARGIN PERCENT');
    await element(by.text('235')).tap();
    await compareScreens(element(by.id('test-root')), '235');
    await element(by.id('grid_min_c')).tap();
    console.log('236:GRID MIN CONTENT MAXIMUM SINGLE ITEM');
    await element(by.text('236')).tap();
    await compareScreens(element(by.id('test-root')), '236');
    await element(by.id('grid_min_c')).tap();
    console.log('237:GRID MIN CONTENT SINGLE ITEM');
    await element(by.text('237')).tap();
    await compareScreens(element(by.id('test-root')), '237');
    await element(by.id('grid_min_c')).tap();
    console.log('243:GRID PERCENT ITEMS NESTED MODERATE');
    await element(by.text('243')).tap();
    await compareScreens(element(by.id('test-root')), '243');
    await element(by.id('grid_perce')).tap();
    console.log('244:GRID PERCENT ITEMS NESTED WITH PADDING MARGIN');
    await element(by.text('244')).tap();
    await compareScreens(element(by.id('test-root')), '244');
    await element(by.id('grid_perce')).tap();
    console.log('245:GRID PERCENT ITEMS WIDTH AND MARGIN');
    await element(by.text('245')).tap();
    await compareScreens(element(by.id('test-root')), '245');
    await element(by.id('grid_perce')).tap();
    console.log('246:GRID PERCENT ITEMS WIDTH AND PADDING');
    await element(by.text('246')).tap();
    await compareScreens(element(by.id('test-root')), '246');
    await element(by.id('grid_perce')).tap();
    console.log('248:GRID PERCENT TRACKS DEFINITE UNDERFLOW');
    await element(by.text('248')).tap();
    await compareScreens(element(by.id('test-root')), '248');
    await element(by.id('grid_perce')).tap();
    console.log('250:GRID PERCENT TRACKS INDEFINITE WITH CONTENT OVERFLOW');
    await element(by.text('250')).tap();
    await compareScreens(element(by.id('test-root')), '250');
    await element(by.id('grid_perce')).tap();
    console.log('251:GRID PERCENT TRACKS INDEFINITE WITH CONTENT UNDERFLOW');
    await element(by.text('251')).tap();
    await compareScreens(element(by.id('test-root')), '251');
    await element(by.id('grid_perce')).tap();
    console.log('252:GRID PLACEMENT AUTO NEGATIVE');
    await element(by.text('252')).tap();
    await compareScreens(element(by.id('test-root')), '252');
    await element(by.id('grid_place')).tap();
    console.log('253:GRID PLACEMENT DEFINITE IN SECONDARY AXIS WITH FULLY DEFINITE NEGATIVE');
    await element(by.text('253')).tap();
    await compareScreens(element(by.id('test-root')), '253');
    await element(by.id('grid_place')).tap();
    console.log('254:GRID RELAYOUT VERTICAL TEXT');
    await element(by.text('254')).tap();
    await compareScreens(element(by.id('test-root')), '254');
    await element(by.id('grid_relay')).tap();
    console.log('255:GRID SIZE CHILD FIXED TRACKS');
    await element(by.text('255')).tap();
    await compareScreens(element(by.id('test-root')), '255');
    await element(by.id('grid_size_')).tap();
    console.log('256:JUSTIFY CONTENT COLUMN CENTER');
    await element(by.text('256')).tap();
    await compareScreens(element(by.id('test-root')), '256');
    await element(by.id('justify_co')).tap();
    console.log('257:JUSTIFY CONTENT COLUMN FLEX END');
    await element(by.text('257')).tap();
    await compareScreens(element(by.id('test-root')), '257');
    await element(by.id('justify_co')).tap();
    console.log('258:JUSTIFY CONTENT COLUMN FLEX START');
    await element(by.text('258')).tap();
    await compareScreens(element(by.id('test-root')), '258');
    await element(by.id('justify_co')).tap();
    console.log('259:JUSTIFY CONTENT COLUMN MIN HEIGHT AND MARGIN BOTTOM');
    await element(by.text('259')).tap();
    await compareScreens(element(by.id('test-root')), '259');
    await element(by.id('justify_co')).tap();
    console.log('260:JUSTIFY CONTENT COLUMN MIN HEIGHT AND MARGIN TOP');
    await element(by.text('260')).tap();
    await compareScreens(element(by.id('test-root')), '260');
    await element(by.id('justify_co')).tap();
    console.log('261:JUSTIFY CONTENT COLUMN SPACE AROUND');
    await element(by.text('261')).tap();
    await compareScreens(element(by.id('test-root')), '261');
    await element(by.id('justify_co')).tap();
    console.log('262:JUSTIFY CONTENT COLUMN SPACE BETWEEN');
    await element(by.text('262')).tap();
    await compareScreens(element(by.id('test-root')), '262');
    await element(by.id('justify_co')).tap();
    console.log('263:JUSTIFY CONTENT COLUMN SPACE EVENLY');
    await element(by.text('263')).tap();
    await compareScreens(element(by.id('test-root')), '263');
    await element(by.id('justify_co')).tap();
    console.log('264:JUSTIFY CONTENT MIN MAX');
    await element(by.text('264')).tap();
    await compareScreens(element(by.id('test-root')), '264');
    await element(by.id('justify_co')).tap();
    console.log('265:JUSTIFY CONTENT MIN WIDTH WITH PADDING CHILD WIDTH GREATER THAN PARENT');
    await element(by.text('265')).tap();
    await compareScreens(element(by.id('test-root')), '265');
    await element(by.id('justify_co')).tap();
    console.log('266:JUSTIFY CONTENT MIN WIDTH WITH PADDING CHILD WIDTH LOWER THAN PARENT');
    await element(by.text('266')).tap();
    await compareScreens(element(by.id('test-root')), '266');
    await element(by.id('justify_co')).tap();
    console.log('267:JUSTIFY CONTENT OVERFLOW MIN MAX');
    await element(by.text('267')).tap();
    await compareScreens(element(by.id('test-root')), '267');
    await element(by.id('justify_co')).tap();
    console.log('268:JUSTIFY CONTENT ROW CENTER');
    await element(by.text('268')).tap();
    await compareScreens(element(by.id('test-root')), '268');
    await element(by.id('justify_co')).tap();
    console.log('269:JUSTIFY CONTENT ROW FLEX END');
    await element(by.text('269')).tap();
    await compareScreens(element(by.id('test-root')), '269');
    await element(by.id('justify_co')).tap();
    console.log('270:JUSTIFY CONTENT ROW FLEX START');
    await element(by.text('270')).tap();
    await compareScreens(element(by.id('test-root')), '270');
    await element(by.id('justify_co')).tap();
    console.log('272:JUSTIFY CONTENT ROW MIN WIDTH AND MARGIN');
    await element(by.text('272')).tap();
    await compareScreens(element(by.id('test-root')), '272');
    await element(by.id('justify_co')).tap();
    console.log('273:JUSTIFY CONTENT ROW SPACE AROUND');
    await element(by.text('273')).tap();
    await compareScreens(element(by.id('test-root')), '273');
    await element(by.id('justify_co')).tap();
    console.log('274:JUSTIFY CONTENT ROW SPACE BETWEEN');
    await element(by.text('274')).tap();
    await compareScreens(element(by.id('test-root')), '274');
    await element(by.id('justify_co')).tap();
    console.log('275:JUSTIFY CONTENT ROW SPACE EVENLY');
    await element(by.text('275')).tap();
    await compareScreens(element(by.id('test-root')), '275');
    await element(by.id('justify_co')).tap();
    console.log('276:MARGIN AND FLEX COLUMN');
    await element(by.text('276')).tap();
    await compareScreens(element(by.id('test-root')), '276');
    await element(by.id('margin_and')).tap();
    console.log('277:MARGIN AND FLEX ROW');
    await element(by.text('277')).tap();
    await compareScreens(element(by.id('test-root')), '277');
    await element(by.id('margin_and')).tap();
    console.log('278:MARGIN AND STRETCH COLUMN');
    await element(by.text('278')).tap();
    await compareScreens(element(by.id('test-root')), '278');
    await element(by.id('margin_and')).tap();
    console.log('279:MARGIN AND STRETCH ROW');
    await element(by.text('279')).tap();
    await compareScreens(element(by.id('test-root')), '279');
    await element(by.id('margin_and')).tap();
    console.log('280:MARGIN AUTO BOTTOM');
    await element(by.text('280')).tap();
    await compareScreens(element(by.id('test-root')), '280');
    await element(by.id('margin_aut')).tap();
    console.log('281:MARGIN AUTO BOTTOM AND TOP');
    await element(by.text('281')).tap();
    await compareScreens(element(by.id('test-root')), '281');
    await element(by.id('margin_aut')).tap();
    console.log('282:MARGIN AUTO BOTTOM AND TOP JUSTIFY CENTER');
    await element(by.text('282')).tap();
    await compareScreens(element(by.id('test-root')), '282');
    await element(by.id('margin_aut')).tap();
    console.log('283:MARGIN AUTO LEFT');
    await element(by.text('283')).tap();
    await compareScreens(element(by.id('test-root')), '283');
    await element(by.id('margin_aut')).tap();
    console.log('284:MARGIN AUTO LEFT AND RIGHT');
    await element(by.text('284')).tap();
    await compareScreens(element(by.id('test-root')), '284');
    await element(by.id('margin_aut')).tap();
    console.log('285:MARGIN AUTO LEFT AND RIGHT COLUMN');
    await element(by.text('285')).tap();
    await compareScreens(element(by.id('test-root')), '285');
    await element(by.id('margin_aut')).tap();
    console.log('286:MARGIN AUTO LEFT AND RIGHT COLUMN AND CENTER');
    await element(by.text('286')).tap();
    await compareScreens(element(by.id('test-root')), '286');
    await element(by.id('margin_aut')).tap();
    console.log('287:MARGIN AUTO LEFT AND RIGHT STRETCH');
    await element(by.text('287')).tap();
    await compareScreens(element(by.id('test-root')), '287');
    await element(by.id('margin_aut')).tap();
    console.log('288:MARGIN AUTO LEFT CHILD BIGGER THAN PARENT');
    await element(by.text('288')).tap();
    await compareScreens(element(by.id('test-root')), '288');
    await element(by.id('margin_aut')).tap();
    console.log('289:MARGIN AUTO LEFT FIX RIGHT CHILD BIGGER THAN PARENT');
    await element(by.text('289')).tap();
    await compareScreens(element(by.id('test-root')), '289');
    await element(by.id('margin_aut')).tap();
    console.log('290:MARGIN AUTO LEFT RIGHT CHILD BIGGER THAN PARENT');
    await element(by.text('290')).tap();
    await compareScreens(element(by.id('test-root')), '290');
    await element(by.id('margin_aut')).tap();
    console.log('291:MARGIN AUTO LEFT STRETCHING CHILD');
    await element(by.text('291')).tap();
    await compareScreens(element(by.id('test-root')), '291');
    await element(by.id('margin_aut')).tap();
    console.log('292:MARGIN AUTO MUTIPLE CHILDREN COLUMN');
    await element(by.text('292')).tap();
    await compareScreens(element(by.id('test-root')), '292');
    await element(by.id('margin_aut')).tap();
    console.log('293:MARGIN AUTO MUTIPLE CHILDREN ROW');
    await element(by.text('293')).tap();
    await compareScreens(element(by.id('test-root')), '293');
    await element(by.id('margin_aut')).tap();
    console.log('294:MARGIN AUTO RIGHT');
    await element(by.text('294')).tap();
    await compareScreens(element(by.id('test-root')), '294');
    await element(by.id('margin_aut')).tap();
    console.log('295:MARGIN AUTO TOP');
    await element(by.text('295')).tap();
    await compareScreens(element(by.id('test-root')), '295');
    await element(by.id('margin_aut')).tap();
    console.log('296:MARGIN AUTO TOP AND BOTTOM STRETCH');
    await element(by.text('296')).tap();
    await compareScreens(element(by.id('test-root')), '296');
    await element(by.id('margin_aut')).tap();
    console.log('297:MARGIN AUTO TOP STRETCHING CHILD');
    await element(by.text('297')).tap();
    await compareScreens(element(by.id('test-root')), '297');
    await element(by.id('margin_aut')).tap();
    console.log('298:MARGIN BOTTOM');
    await element(by.text('298')).tap();
    await compareScreens(element(by.id('test-root')), '298');
    await element(by.id('margin_bot')).tap();
    console.log('299:MARGIN FIX LEFT AUTO RIGHT CHILD BIGGER THAN PARENT');
    await element(by.text('299')).tap();
    await compareScreens(element(by.id('test-root')), '299');
    await element(by.id('margin_fix')).tap();
    console.log('300:MARGIN LEFT');
    await element(by.text('300')).tap();
    await compareScreens(element(by.id('test-root')), '300');
    await element(by.id('margin_lef')).tap();
    console.log('301:MARGIN RIGHT');
    await element(by.text('301')).tap();
    await compareScreens(element(by.id('test-root')), '301');
    await element(by.id('margin_rig')).tap();
    console.log('302:MARGIN SHOULD NOT BE PART OF MAX HEIGHT');
    await element(by.text('302')).tap();
    await compareScreens(element(by.id('test-root')), '302');
    await element(by.id('margin_sho')).tap();
    console.log('303:MARGIN SHOULD NOT BE PART OF MAX WIDTH');
    await element(by.text('303')).tap();
    await compareScreens(element(by.id('test-root')), '303');
    await element(by.id('margin_sho')).tap();
    console.log('304:MARGIN TOP');
    await element(by.text('304')).tap();
    await compareScreens(element(by.id('test-root')), '304');
    await element(by.id('margin_top')).tap();
    console.log('305:MARGIN WITH SIBLING COLUMN');
    await element(by.text('305')).tap();
    await compareScreens(element(by.id('test-root')), '305');
    await element(by.id('margin_wit')).tap();
    console.log('306:MARGIN WITH SIBLING ROW');
    await element(by.text('306')).tap();
    await compareScreens(element(by.id('test-root')), '306');
    await element(by.id('margin_wit')).tap();
    console.log('307:MAX HEIGHT');
    await element(by.text('307')).tap();
    await compareScreens(element(by.id('test-root')), '307');
    await element(by.id('max_height')).tap();
    console.log('310:MAX WIDTH');
    await element(by.text('310')).tap();
    await compareScreens(element(by.id('test-root')), '310');
    await element(by.id('max_width')).tap();
    console.log('313:MEASURE CHILD');
    await element(by.text('313')).tap();
    await compareScreens(element(by.id('test-root')), '313');
    await element(by.id('measure_ch')).tap();
    console.log('314:MEASURE CHILD ABSOLUTE');
    await element(by.text('314')).tap();
    await compareScreens(element(by.id('test-root')), '314');
    await element(by.id('measure_ch')).tap();
    console.log('315:MEASURE CHILD CONSTRAINT');
    await element(by.text('315')).tap();
    await compareScreens(element(by.id('test-root')), '315');
    await element(by.id('measure_ch')).tap();
    console.log('316:MEASURE CHILD CONSTRAINT PADDING PARENT');
    await element(by.text('316')).tap();
    await compareScreens(element(by.id('test-root')), '316');
    await element(by.id('measure_ch')).tap();
    console.log('317:MEASURE CHILD WITH FLEX GROW');
    await element(by.text('317')).tap();
    await compareScreens(element(by.id('test-root')), '317');
    await element(by.id('measure_ch')).tap();
    console.log('318:MEASURE CHILD WITH FLEX SHRINK');
    await element(by.text('318')).tap();
    await compareScreens(element(by.id('test-root')), '318');
    await element(by.id('measure_ch')).tap();
    console.log('319:MEASURE FLEX BASIS OVERRIDES MEASURE');
    await element(by.text('319')).tap();
    await compareScreens(element(by.id('test-root')), '319');
    await element(by.id('measure_fl')).tap();
    console.log('320:MEASURE HEIGHT OVERRIDES MEASURE');
    await element(by.text('320')).tap();
    await compareScreens(element(by.id('test-root')), '320');
    await element(by.id('measure_he')).tap();
    console.log('321:MEASURE REMEASURE CHILD AFTER GROWING');
    await element(by.text('321')).tap();
    await compareScreens(element(by.id('test-root')), '321');
    await element(by.id('measure_re')).tap();
    console.log('322:MEASURE REMEASURE CHILD AFTER SHRINKING');
    await element(by.text('322')).tap();
    await compareScreens(element(by.id('test-root')), '322');
    await element(by.id('measure_re')).tap();
    console.log('323:MEASURE REMEASURE CHILD AFTER STRETCHING');
    await element(by.text('323')).tap();
    await compareScreens(element(by.id('test-root')), '323');
    await element(by.id('measure_re')).tap();
    console.log('325:MEASURE STRETCH OVERRIDES MEASURE');
    await element(by.text('325')).tap();
    await compareScreens(element(by.id('test-root')), '325');
    await element(by.id('measure_st')).tap();
    console.log('326:MEASURE WIDTH OVERRIDES MEASURE');
    await element(by.text('326')).tap();
    await compareScreens(element(by.id('test-root')), '326');
    await element(by.id('measure_wi')).tap();
    console.log('327:MIN HEIGHT');
    await element(by.text('327')).tap();
    await compareScreens(element(by.id('test-root')), '327');
    await element(by.id('min_height')).tap();
    console.log('331:MIN MAX PERCENT NO WIDTH HEIGHT');
    await element(by.text('331')).tap();
    await compareScreens(element(by.id('test-root')), '331');
    await element(by.id('min_max_pe')).tap();
    console.log('332:MIN WIDTH');
    await element(by.text('332')).tap();
    await compareScreens(element(by.id('test-root')), '332');
    await element(by.id('min_width')).tap();
    console.log('336:NESTED OVERFLOWING CHILD');
    await element(by.text('336')).tap();
    await compareScreens(element(by.id('test-root')), '336');
    await element(by.id('nested_ove')).tap();
    console.log('337:NESTED OVERFLOWING CHILD IN CONSTRAINT PARENT');
    await element(by.text('337')).tap();
    await compareScreens(element(by.id('test-root')), '337');
    await element(by.id('nested_ove')).tap();
    console.log('338:OVERFLOW CROSS AXIS');
    await element(by.text('338')).tap();
    await compareScreens(element(by.id('test-root')), '338');
    await element(by.id('overflow_c')).tap();
    console.log('339:OVERFLOW MAIN AXIS');
    await element(by.text('339')).tap();
    await compareScreens(element(by.id('test-root')), '339');
    await element(by.id('overflow_m')).tap();
    console.log('340:PADDING ALIGN END CHILD');
    await element(by.text('340')).tap();
    await compareScreens(element(by.id('test-root')), '340');
    await element(by.id('padding_al')).tap();
    console.log('341:PADDING CENTER CHILD');
    await element(by.text('341')).tap();
    await compareScreens(element(by.id('test-root')), '341');
    await element(by.id('padding_ce')).tap();
    console.log('342:PADDING FLEX CHILD');
    await element(by.text('342')).tap();
    await compareScreens(element(by.id('test-root')), '342');
    await element(by.id('padding_fl')).tap();
    console.log('344:PADDING STRETCH CHILD');
    await element(by.text('344')).tap();
    await compareScreens(element(by.id('test-root')), '344');
    await element(by.id('padding_st')).tap();
    console.log('345:PARENT WRAP CHILD SIZE OVERFLOWING PARENT');
    await element(by.text('345')).tap();
    await compareScreens(element(by.id('test-root')), '345');
    await element(by.id('parent_wra')).tap();
    console.log('346:PERCENT ABSOLUTE POSITION');
    await element(by.text('346')).tap();
    await compareScreens(element(by.id('test-root')), '346');
    await element(by.id('percent_ab')).tap();
    console.log('347:PERCENT WITHIN FLEX GROW');
    await element(by.text('347')).tap();
    await compareScreens(element(by.id('test-root')), '347');
    await element(by.id('percent_wi')).tap();
    console.log('348:PERCENTAGE ABSOLUTE POSITION');
    await element(by.text('348')).tap();
    await compareScreens(element(by.id('test-root')), '348');
    await element(by.id('percentage')).tap();
    console.log('349:PERCENTAGE CONTAINER IN WRAPPING CONTAINER');
    await element(by.text('349')).tap();
    await compareScreens(element(by.id('test-root')), '349');
    await element(by.id('percentage')).tap();
    console.log('350:PERCENTAGE FLEX BASIS');
    await element(by.text('350')).tap();
    await compareScreens(element(by.id('test-root')), '350');
    await element(by.id('percentage')).tap();
    console.log('351:PERCENTAGE FLEX BASIS CROSS');
    await element(by.text('351')).tap();
    await compareScreens(element(by.id('test-root')), '351');
    await element(by.id('percentage')).tap();
    console.log('352:PERCENTAGE FLEX BASIS CROSS MAX HEIGHT');
    await element(by.text('352')).tap();
    await compareScreens(element(by.id('test-root')), '352');
    await element(by.id('percentage')).tap();
    console.log('353:PERCENTAGE FLEX BASIS CROSS MAX WIDTH');
    await element(by.text('353')).tap();
    await compareScreens(element(by.id('test-root')), '353');
    await element(by.id('percentage')).tap();
    console.log('354:PERCENTAGE FLEX BASIS CROSS MIN HEIGHT');
    await element(by.text('354')).tap();
    await compareScreens(element(by.id('test-root')), '354');
    await element(by.id('percentage')).tap();
    console.log('355:PERCENTAGE FLEX BASIS CROSS MIN WIDTH');
    await element(by.text('355')).tap();
    await compareScreens(element(by.id('test-root')), '355');
    await element(by.id('percentage')).tap();
    console.log('356:PERCENTAGE FLEX BASIS MAIN MAX HEIGHT');
    await element(by.text('356')).tap();
    await compareScreens(element(by.id('test-root')), '356');
    await element(by.id('percentage')).tap();
    console.log('357:PERCENTAGE FLEX BASIS MAIN MAX WIDTH');
    await element(by.text('357')).tap();
    await compareScreens(element(by.id('test-root')), '357');
    await element(by.id('percentage')).tap();
    console.log('358:PERCENTAGE FLEX BASIS MAIN MIN WIDTH');
    await element(by.text('358')).tap();
    await compareScreens(element(by.id('test-root')), '358');
    await element(by.id('percentage')).tap();
    console.log('359:PERCENTAGE MARGIN SHOULD CALCULATE BASED ONLY ON WIDTH');
    await element(by.text('359')).tap();
    await compareScreens(element(by.id('test-root')), '359');
    await element(by.id('percentage')).tap();
    console.log('360:PERCENTAGE MODERATE COMPLEXITY');
    await element(by.text('360')).tap();
    await compareScreens(element(by.id('test-root')), '360');
    await element(by.id('percentage')).tap();
    console.log('361:PERCENTAGE MULTIPLE NESTED WITH PADDING MARGIN AND PERCENTAGE VALUES');
    await element(by.text('361')).tap();
    await compareScreens(element(by.id('test-root')), '361');
    await element(by.id('percentage')).tap();
    console.log('362:PERCENTAGE PADDING SHOULD CALCULATE BASED ONLY ON WIDTH');
    await element(by.text('362')).tap();
    await compareScreens(element(by.id('test-root')), '362');
    await element(by.id('percentage')).tap();
    console.log('363:PERCENTAGE POSITION BOTTOM RIGHT');
    await element(by.text('363')).tap();
    await compareScreens(element(by.id('test-root')), '363');
    await element(by.id('percentage')).tap();
    console.log('364:PERCENTAGE POSITION LEFT TOP');
    await element(by.text('364')).tap();
    await compareScreens(element(by.id('test-root')), '364');
    await element(by.id('percentage')).tap();
    console.log('365:PERCENTAGE SIZE BASED ON PARENT INNER SIZE');
    await element(by.text('365')).tap();
    await compareScreens(element(by.id('test-root')), '365');
    await element(by.id('percentage')).tap();
    console.log('366:PERCENTAGE SIZE OF FLEX BASIS');
    await element(by.text('366')).tap();
    await compareScreens(element(by.id('test-root')), '366');
    await element(by.id('percentage')).tap();
    console.log('367:PERCENTAGE WIDTH HEIGHT');
    await element(by.text('367')).tap();
    await compareScreens(element(by.id('test-root')), '367');
    await element(by.id('percentage')).tap();
    console.log('369:RELATIVE POSITION SHOULD NOT NUDGE SIBLINGS');
    await element(by.text('369')).tap();
    await compareScreens(element(by.id('test-root')), '369');
    await element(by.id('relative_p')).tap();
    console.log('370:ROUNDING FLEX BASIS FLEX GROW ROW PRIME NUMBER WIDTH');
    await element(by.text('370')).tap();
    await compareScreens(element(by.id('test-root')), '370');
    await element(by.id('rounding_f')).tap();
    console.log('371:ROUNDING FLEX BASIS FLEX GROW ROW WIDTH OF 100');
    await element(by.text('371')).tap();
    await compareScreens(element(by.id('test-root')), '371');
    await element(by.id('rounding_f')).tap();
    console.log('372:ROUNDING FLEX BASIS FLEX SHRINK ROW');
    await element(by.text('372')).tap();
    await compareScreens(element(by.id('test-root')), '372');
    await element(by.id('rounding_f')).tap();
    console.log('373:ROUNDING FLEX BASIS OVERRIDES MAIN SIZE');
    await element(by.text('373')).tap();
    await compareScreens(element(by.id('test-root')), '373');
    await element(by.id('rounding_f')).tap();
    console.log('374:ROUNDING FRACTIAL INPUT 1');
    await element(by.text('374')).tap();
    await compareScreens(element(by.id('test-root')), '374');
    await element(by.id('rounding_f')).tap();
    console.log('375:ROUNDING FRACTIAL INPUT 2');
    await element(by.text('375')).tap();
    await compareScreens(element(by.id('test-root')), '375');
    await element(by.id('rounding_f')).tap();
    console.log('376:ROUNDING FRACTIAL INPUT 3');
    await element(by.text('376')).tap();
    await compareScreens(element(by.id('test-root')), '376');
    await element(by.id('rounding_f')).tap();
    console.log('377:ROUNDING FRACTIAL INPUT 4');
    await element(by.text('377')).tap();
    await compareScreens(element(by.id('test-root')), '377');
    await element(by.id('rounding_f')).tap();
    console.log('378:ROUNDING TOTAL FRACTIAL');
    await element(by.text('378')).tap();
    await compareScreens(element(by.id('test-root')), '378');
    await element(by.id('rounding_t')).tap();
    console.log('379:ROUNDING TOTAL FRACTIAL NESTED');
    await element(by.text('379')).tap();
    await compareScreens(element(by.id('test-root')), '379');
    await element(by.id('rounding_t')).tap();
    console.log('380:SIZE DEFINED BY CHILD');
    await element(by.text('380')).tap();
    await compareScreens(element(by.id('test-root')), '380');
    await element(by.id('size_defin')).tap();
    console.log('381:SIZE DEFINED BY CHILD WITH BORDER');
    await element(by.text('381')).tap();
    await compareScreens(element(by.id('test-root')), '381');
    await element(by.id('size_defin')).tap();
    console.log('382:SIZE DEFINED BY CHILD WITH PADDING');
    await element(by.text('382')).tap();
    await compareScreens(element(by.id('test-root')), '382');
    await element(by.id('size_defin')).tap();
    console.log('383:SIZE DEFINED BY GRAND CHILD');
    await element(by.text('383')).tap();
    await compareScreens(element(by.id('test-root')), '383');
    await element(by.id('size_defin')).tap();
    console.log('384:WIDTH SMALLER THEN CONTENT WITH FLEX GROW LARGE SIZE');
    await element(by.text('384')).tap();
    await compareScreens(element(by.id('test-root')), '384');
    await element(by.id('width_smal')).tap();
    console.log('385:WIDTH SMALLER THEN CONTENT WITH FLEX GROW SMALL SIZE');
    await element(by.text('385')).tap();
    await compareScreens(element(by.id('test-root')), '385');
    await element(by.id('width_smal')).tap();
    console.log('387:WIDTH SMALLER THEN CONTENT WITH FLEX GROW VERY LARGE SIZE');
    await element(by.text('387')).tap();
    await compareScreens(element(by.id('test-root')), '387');
    await element(by.id('width_smal')).tap();
    console.log('388:WRAP COLUMN');
    await element(by.text('388')).tap();
    await compareScreens(element(by.id('test-root')), '388');
    await element(by.id('wrap_colum')).tap();
    console.log('389:WRAP NODES WITH CONTENT SIZING MARGIN CROSS');
    await element(by.text('389')).tap();
    await compareScreens(element(by.id('test-root')), '389');
    await element(by.id('wrap_nodes')).tap();
    console.log('390:WRAP NODES WITH CONTENT SIZING OVERFLOWING MARGIN');
    await element(by.text('390')).tap();
    await compareScreens(element(by.id('test-root')), '390');
    await element(by.id('wrap_nodes')).tap();
    console.log('391:WRAP REVERSE COLUMN');
    await element(by.text('391')).tap();
    await compareScreens(element(by.id('test-root')), '391');
    await element(by.id('wrap_rever')).tap();
    console.log('392:WRAP REVERSE COLUMN FIXED SIZE');
    await element(by.text('392')).tap();
    await compareScreens(element(by.id('test-root')), '392');
    await element(by.id('wrap_rever')).tap();
    console.log('393:WRAP REVERSE ROW');
    await element(by.text('393')).tap();
    await compareScreens(element(by.id('test-root')), '393');
    await element(by.id('wrap_rever')).tap();
    console.log('394:WRAP REVERSE ROW ALIGN CONTENT CENTER');
    await element(by.text('394')).tap();
    await compareScreens(element(by.id('test-root')), '394');
    await element(by.id('wrap_rever')).tap();
    console.log('395:WRAP REVERSE ROW ALIGN CONTENT FLEX START');
    await element(by.text('395')).tap();
    await compareScreens(element(by.id('test-root')), '395');
    await element(by.id('wrap_rever')).tap();
    console.log('396:WRAP REVERSE ROW ALIGN CONTENT SPACE AROUND');
    await element(by.text('396')).tap();
    await compareScreens(element(by.id('test-root')), '396');
    await element(by.id('wrap_rever')).tap();
    console.log('397:WRAP REVERSE ROW ALIGN CONTENT STRETCH');
    await element(by.text('397')).tap();
    await compareScreens(element(by.id('test-root')), '397');
    await element(by.id('wrap_rever')).tap();
    console.log('398:WRAP REVERSE ROW SINGLE LINE DIFFERENT SIZE');
    await element(by.text('398')).tap();
    await compareScreens(element(by.id('test-root')), '398');
    await element(by.id('wrap_rever')).tap();
    console.log('399:WRAP ROW');
    await element(by.text('399')).tap();
    await compareScreens(element(by.id('test-root')), '399');
    await element(by.id('wrap_row')).tap();
    console.log('400:WRAP ROW ALIGN ITEMS CENTER');
    await element(by.text('400')).tap();
    await compareScreens(element(by.id('test-root')), '400');
    await element(by.id('wrap_row_a')).tap();
    console.log('401:WRAP ROW ALIGN ITEMS FLEX END');
    await element(by.text('401')).tap();
    await compareScreens(element(by.id('test-root')), '401');
    await element(by.id('wrap_row_a')).tap();
    console.log('402:WRAPPED COLUMN MAX HEIGHT');
    await element(by.text('402')).tap();
    await compareScreens(element(by.id('test-root')), '402');
    await element(by.id('wrapped_co')).tap();
    console.log('403:WRAPPED COLUMN MAX HEIGHT FLEX');
    await element(by.text('403')).tap();
    await compareScreens(element(by.id('test-root')), '403');
    await element(by.id('wrapped_co')).tap();
    console.log('404:WRAPPED ROW WITHIN ALIGN ITEMS CENTER');
    await element(by.text('404')).tap();
    await compareScreens(element(by.id('test-root')), '404');
    await element(by.id('wrapped_ro')).tap();
    console.log('405:WRAPPED ROW WITHIN ALIGN ITEMS FLEX END');
    await element(by.text('405')).tap();
    await compareScreens(element(by.id('test-root')), '405');
    await element(by.id('wrapped_ro')).tap();
    console.log('406:WRAPPED ROW WITHIN ALIGN ITEMS FLEX START');
    await element(by.text('406')).tap();
    await compareScreens(element(by.id('test-root')), '406');
    await element(by.id('wrapped_ro')).tap();
  });
});
